import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Harith Madani
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html> ");
        out.println("<head> ");
        out.println("<title>");

        int titleIndex = getChildElement(channel, "title");

        // If a title child exists, print it (website title)
        if (channel.child(titleIndex).numberOfChildren() > 0) {
            out.print(channel.child(titleIndex).child(0).label());
        } else {
            out.print("Empty Title");
        }

        out.println("</title>");
        out.println("</head>");
        out.println("<body>");

        int linkIndex = getChildElement(channel, "link");
        String link = channel.child(linkIndex).child(0).label();

        // Print the title link
        out.print("<h1><a href =\"" + link + "\" " + ">");

        // If a title child exists, print it (website header)
        if (channel.child(titleIndex).numberOfChildren() > 0) {
            out.print(channel.child(titleIndex).child(0).label());
            // Otherwise empty title
        } else {
            out.print("Empty Title");
        }
        out.println("</a></h1>");

        // print the website description
        int descriptionIndex = getChildElement(channel, "description");
        if (channel.child(descriptionIndex).numberOfChildren() > 0) {
            out.print("<p> " + channel.child(descriptionIndex).child(0).label()
                    + "</p>");
        } else {
            out.print("<p>No Description</p>");
        }
        // Open a table and print the table headers
        out.println("<table border =\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        // Print the necessary HTML closing tags
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        // set the index as -1 for "not found"
        int index = -1;

        // Iterate through the children of xml and quit if the tag has been found
        for (int i = 0; i < xml.numberOfChildren() && index == -1; i++) {
            if (xml.child(i).isTag() && xml.child(i).label().equals(tag)) {
                // set the index to i (where the tag was found)
                index = i;

            }
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String title;
        String pubDate;
        String description;
        String source;

        out.println("<tr>");

        // pubDate printing

        int pubDateIndex = getChildElement(item, "pubDate");
        // If the pubDate exists and has a child, print the child label as table data
        if (pubDateIndex != -1) {
            pubDate = item.child(pubDateIndex).child(0).label();
            out.println("<td> " + pubDate + "</td>");
            // Otherwise print No Date Available as table data
        } else {
            out.println("<td>No Date Available</td>");
        }

        // Source printing
        int sourceIndex = getChildElement(item, "source");

        // If a source exists, has a url and child, Print the source as a link
        if (sourceIndex != -1
                && item.child(sourceIndex).numberOfChildren() > 0) {
            source = item.child(sourceIndex).child(0).label();
            out.println("<td><a href=\""
                    + item.child(sourceIndex).attributeValue("url") + "\">"
                    + source + "</a></td>");
            // If a source exists and has a child, print the label as table data
        } else if (sourceIndex != -1
                && item.child(sourceIndex).numberOfChildren() > 0) {
            source = item.child(sourceIndex).child(0).label();
            out.println("<td> " + source + "</td>");
            // Otherwise, print No Source Available
        } else {
            out.println("<td>No Source Available</td>");
        }

        // Title printing
        int titleIndex = getChildElement(item, "title");
        int descriptionIndex = getChildElement(item, "description");
        int linkIndex = getChildElement(item, "link");

        // If a title exists, has a child, and a link exists, Print the title as a link
        if (titleIndex != -1 && item.child(titleIndex).numberOfChildren() > 0
                && linkIndex != -1) {
            title = item.child(titleIndex).child(0).label();
            out.println("<td><a href=" + item.child(linkIndex).child(0) + ">"
                    + title + "</a></td>");
            // If a title exists and has a child, print the child label
        } else if (titleIndex != -1
                && item.child(titleIndex).numberOfChildren() > 0) {
            title = item.child(titleIndex).child(0).label();
            out.println("<td> " + title + "</td>");
            // If a description exists, has a child, and a link exists,
            // Print the description as a link
        } else if (descriptionIndex != -1
                && item.child(descriptionIndex).numberOfChildren() > 0
                && linkIndex != -1) {
            description = item.child(descriptionIndex).child(0).label();
            out.println("<td><a href=" + item.child(linkIndex).child(0).label()
                    + ">" + description + "</a></td>");
            // If a description exists and has a child, print the child label
        } else if (descriptionIndex != -1
                && item.child(descriptionIndex).numberOfChildren() > 0) {
            description = item.child(descriptionIndex).child(0).label();
            out.println("<td> " + description + "</td>");
            // Otherwise, No title available
        } else {
            out.println("<td>No Title Available</td>");
        }

        out.println("</tr>");
        out.println();
    }

    /**
     * Identifies whether the given xmlTree is in RSS format or not.
     *
     * @param xml
     *            the {@code XMLTree} to search
     *
     *
     * @return isRSS
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * isRSS =
     *  Whether {@code XMLTree} is in RSS format or not
     *
     * </pre>
     */
    private static boolean isRSS(XMLTree xml) {
        boolean isRSS = false;

        if (xml.label().equals("rss") && xml.hasAttribute("version")
                && xml.attributeValue("version").equals("2.0")) {
            isRSS = true;
        }

        return isRSS;
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter a RSS 2.0 feed: ");
        String userRSS = in.nextLine();

        // Set the user's RSS feed to "xml"
        XMLTree xml = new XMLTree1(userRSS);

        // If the user's RSS is in the wrong format, a message is output
        if (!isRSS(xml)) {
            out.println("Invalid RSS 2.0 feed.");
            // otherwise, The RSS reading process continues
        } else {
            // Prompt the user for an HTML file name and set a
            // simpleWriter to output to the file
            out.print("Enter an HTML file name for output: ");
            String userHTML = in.nextLine();
            SimpleWriter file = new SimpleWriter1L(userHTML);

            // output the header
            outputHeader(xml.child(0), file);
            // run the "processItem" method for each occurence of the item node
            for (int i = 0; i < xml.child(0).numberOfChildren(); i++) {
                if (xml.child(0).child(i).label().equals("item")) {
                    processItem(xml.child(0).child(i), file);
                }
            }

            // output the footer
            outputFooter(file);
            file.close();
        }

        in.close();
        out.close();
    }

}
